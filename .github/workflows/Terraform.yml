name: 'Terraform'

on:
  push:
    branches:
    - "main"
  pull_request:

env:
   AZURE_SUBSCRIPTION_ID:          ${{secrets.AZURE_SUBSCRIPTION_ID}}
   AZURE_AD_CLIENT_ID:             ${{secrets.AZURE_AD_CLIENT_ID}}
   AZURE_AD_CLIENT_SECRET:         ${{secrets.AZURE_AD_CLIENT_SECRET}}
   AZURE_AD_TENANT_ID:             ${{secrets.AZURE_AD_TENANT_ID}}
   ROOT_PATH: '${{ github.workspace }}/main_project'

jobs:
  terraform_plan:
    name: 'Terraform_plan'
    runs-on: ubuntu-latest

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init
      working-directory:  ${{env.ROOT_PATH}}

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan -input=false
      working-directory: ${{env.ROOT_PATH}}

  terraform_apply:
      name: 'Terraform_apply'
      runs-on: ubuntu-latest
      needs: [terraform_plan]
      environment: production

      # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
      defaults:
        run:
          shell: bash

      steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v3

      # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        run: terraform init
        working-directory:  ${{env.ROOT_PATH}}

      # Generates an execution plan for Terraform
      - name: Terraform apply
        run: terraform apply --auto-approve
        working-directory: ${{env.ROOT_PATH}}